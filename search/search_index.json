{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jailbreak your CPAP machine with Airbreak In light of the COVID-19 crisis and resultant shortage of medical equipment, hospitals have developed protocols for using BiPAP (BIlevel Positive Airway Pressure) machines as non-invasive ventilators , the FDA has approved the use of these modified BiPAP devices as ventilators , and several groups are currently working on ventilator designs that involve a converted BiPAP. However, CPAP (Constant Positive Airway Pressure) devices are cheaper, more widely available, and similar both electrically and mechanically. Unfortunately, they are lacking in some features that the physicians require and, according to their manufacturer, CPAP machines \" would require significant rework in order to function as a ventilator \". What we have done is to \" jailbreak \" the the Airsense 10 CPAP machine, a common, low-cost sleep therapy device intended to treat sleep apnea, so that it is possible to run additional tasks on the device. These new tasks add the features and adjust the range of parameters that make it possible, along with extra equipment like viral filters, to use the device as a temporary ventilator. This can help ease the shortage until more real ventilators are available. Our changes bring the Airsense S10 to near feature parity with BiPAP machines from the same manufacturer, boost the maximum pressure output available, and provide a starting point to add more advanced emergency ventilator functionality. Disclaimer While we are consulting with doctors to validate that the modified firmware works as intended, the codebase in its current form should be considered a proof of concept and is not intended for use in a life-support capacity . Additional equipment like viral filters and monitoring alarms are also required. Please see the FAQ for more information. No IP belonging to device manufacturers is hosted in this repository, nor will it be accepted as a pull request. Major features Adds a Pressure Control Ventilator (PCV) mode that oscillates between high and low pressure at a configurable breathing rate (stock firmware supports only a single pressure, with no breath rate control). Allows maximum pressure to be increased to 30 cm H 2 O, as required by clinical protocols (stock firmware is limited to 20cm H 2 O). Allows smooth rapid pressure change rates for respiration rates up to 30 breaths per minute (stock firmware changes pressure at less than 1 cm/sec). Unlocks all of the vendor modes and tunable configuration parameters, including ST and iVAPS modes present in the firmware. Provides access to all of the sensors (flow, pressure, temperature, tidal volume, minute ventilation, etc). Displays real-time graphs on the screen to show an immediate history of sensor data. Development features Visual and audible alarms when flow stoppage or leakage rates are detected. Closed loop air volume control with backup respiration rates and supplemental O 2 . GPIO interface with other systems. Display statistics in conformance with Rapidly Manufactured Ventilator Standards . FAQ What's the difference between CPAP and BiPAP machines? The Airsense 10 that we have modified is a low cost sleep therapy device that provides a Constant Positive Air Pressure to help with sleep apnea and other disorders. This CPAP mode applies constant pressure to the lungs, but it does not ventilate, or let air move in and out of the lungs. The BiPAP machines are more capable devices to treat sleep apnea and COPD that provide Bi-level Positive Airway Pressure. Bi-level pressure triggers on patient breaths, applying higher pressure when the patient tries to breathe in, and a lower pressure when the patient tries to exhale. This is what's called a support mode, which provides additional pressure support to a patient's natural breathing. These differences apply to the devices as they function out of the box . Our work indicates that the actual difference between a low-end CPAP device and a high-end iVAPS device is just a software upgrade . The CPAP machines have many of the same sensors as the more expensive models, and the Airsense 10 CPAP devices include in their firmware all of the other modes, such as iVAPS and BiPAP-ST. When we unlock that mode in software, the CPAP device functions like a much more capable and expensive iVAPS device. This idea, that the difference between CPAP and BiPAP machines is a software change rather than a hardware change, is at the root of our work. If the common, highly distributed CPAP devices could have a software upgrade that turns them into iVAPS or BiPAP-ST devices capable of ventilating COVID patients, that would be a huge boon to the hospitals and health care workers around the world who are struggling with a lack of ventilators or alternatives to treat the influx of COVID patients. Adding a homebrew function to the existing firmware that alternates between pressures with a configurable delay allows the CPAP to effectively function as a Pressure Control Ventilator (PCV) for sedated patients. Enabling the vendor-provided iVAPS mode, along with further customization and new extensions , should make the devices even more flexible and suitable for clinical use. Can jailbroken CPAP devices be used to treat COVID patients? We want to be very clear here: this modified firmware should not be flashed on CPAP machines and used to treat COVID patients immediately. The firmware that we've developed is an effective demonstration of the capability, and while it has been reviewed and validated by expert researchers, biomedical engineers, and clinical pulmonologists , it has not yet been put through FDA approval. Additionally, the Mt Sinai's protocols for off-label non-invasive ventilation require additional modifications such as viral filter and remote control before the machines would be ready for clinical use. Could hacked machines alleviate the shortage of ventilators? If the manufacturers developed their own firmware updates, or the FDA approves our jailbroken firmware, this could have an extremely large role in bridging the ventilator shortage gap. There are millions of unused or underutilized CPAP and BiPAP devices sitting in closets in America, and roughly another 500,000 units in warehouses in the country. These devices can be used as an alternate ventilator, for low-resource hospitals who are still waiting for the hospital ventilators to arrive. Could homebrew firmware go through FDA approval? If there were no other option, our firmware could go through FDA approval, but we believe that the best route for rolling out these upgrades is to work with the manufacturers to use their resources to validate and distribute these upgrades safely and at scale. There are three main factors at play here: The first is a regulatory/safety one: Under the recently-released FDA guidance on hardware and software modification of CPAP and BiPAP devices to treat COVID patients, the manufacturer has carte blanche to release an updated version of their firmware for their own devices without requiring explicit FDA approval -- they are in the best position from a technical, expertise, safety and regulatory perspective. The second is a practical one: There are many different models of CPAP and BiPAP devices, and reverse-engineering is a slow and painful process. We modified the firmware on the most common model of CPAP in America in about a week, but to get lots of ventilators quickly, you'd need a firmware modification for every mode of CPAP. What we've found in our work is that the work needed for the manufacturer to implement these upgrades is pretty minimal -- the manufacturer has access to the source code, to the schematics, and to the engineers who are intimately familiar with physiology and safety standards. We've found that, in many cases, the bulk of the work has already gone through FDA approval, like the iVAPS menu that is in the firmware on the ResMed Airsense device shown above. Even if other manufacturers had not written a line of code for their CPAP models, the pressure-control ventilator mode that we were able to implement is very simple to develop, designed to work on every CPAP device in existence, and would be a very low technology and regulatory barrier for manufacturers with the right people and resources. The third is related to making these jailbreaks at scale: We could take in every unused CPAP device in the country, unscrew the case and re-flash the firmware . It's slow and expensive but could be solved with lots and lots of people. The thing is, of the 8 million CPAPs in the country, almost all 5 million shipped over the last 3 years have an always-on cellular IoT connection, reporting back usage information to doctors and insurance companies. That cellular connection also has over-the-air upgrade capability that can only be accessed from within the IT infrastructure of the device manufacturers. This is a big deal -- it means that they can selectively upgrade, by serial number, specific units to function as ventilators, without having to open them up -- it can all work over the air. So what's the point? What our firmware does is show that it is possible to re-program these devices in a way that doctors can use to effectively ventilate COVID patients. We have been able to confirm the functionality of the devices in instrumented patient circuits operated by experts in pulmonological measurement. And there are doctors who agree that, if they had an FDA-approved machine that could that can do what these machines are doing, then they could use them to clinically ventilate COVID patients in an ICU. We do have a path to get this firmware through FDA, and we would apply for FDA approval under the Emergency Use Authorization if the manufacturers absolutely refused to cooperate, but the safest and best path is for the manufacturers to enable this upgrade on their own. Separately from the very pressing COVID issues, Airbreak allows CPAP device owners to write their own extensions to customize their devices for their needs , similar to what the Magic Lantern firmware does for cameras. They can add features like the on-screen graphs shown above, or integrate external systems through the expansion port. Additionally, these tools allow the owners and users to gain a better understand their own therapy by gaining access to the sensors on the device. More details Laboratory evaluation Disassembly and wiring instructions Firmware flashing guide Writing extensions github.com/osresearch/airbreak info@airbreak.dev","title":"Airbreak Overview"},{"location":"#jailbreak-your-cpap-machine-with-airbreak","text":"In light of the COVID-19 crisis and resultant shortage of medical equipment, hospitals have developed protocols for using BiPAP (BIlevel Positive Airway Pressure) machines as non-invasive ventilators , the FDA has approved the use of these modified BiPAP devices as ventilators , and several groups are currently working on ventilator designs that involve a converted BiPAP. However, CPAP (Constant Positive Airway Pressure) devices are cheaper, more widely available, and similar both electrically and mechanically. Unfortunately, they are lacking in some features that the physicians require and, according to their manufacturer, CPAP machines \" would require significant rework in order to function as a ventilator \". What we have done is to \" jailbreak \" the the Airsense 10 CPAP machine, a common, low-cost sleep therapy device intended to treat sleep apnea, so that it is possible to run additional tasks on the device. These new tasks add the features and adjust the range of parameters that make it possible, along with extra equipment like viral filters, to use the device as a temporary ventilator. This can help ease the shortage until more real ventilators are available. Our changes bring the Airsense S10 to near feature parity with BiPAP machines from the same manufacturer, boost the maximum pressure output available, and provide a starting point to add more advanced emergency ventilator functionality.","title":"Jailbreak your CPAP machine with Airbreak"},{"location":"#disclaimer","text":"While we are consulting with doctors to validate that the modified firmware works as intended, the codebase in its current form should be considered a proof of concept and is not intended for use in a life-support capacity . Additional equipment like viral filters and monitoring alarms are also required. Please see the FAQ for more information. No IP belonging to device manufacturers is hosted in this repository, nor will it be accepted as a pull request.","title":"Disclaimer"},{"location":"#major-features","text":"Adds a Pressure Control Ventilator (PCV) mode that oscillates between high and low pressure at a configurable breathing rate (stock firmware supports only a single pressure, with no breath rate control). Allows maximum pressure to be increased to 30 cm H 2 O, as required by clinical protocols (stock firmware is limited to 20cm H 2 O). Allows smooth rapid pressure change rates for respiration rates up to 30 breaths per minute (stock firmware changes pressure at less than 1 cm/sec). Unlocks all of the vendor modes and tunable configuration parameters, including ST and iVAPS modes present in the firmware. Provides access to all of the sensors (flow, pressure, temperature, tidal volume, minute ventilation, etc). Displays real-time graphs on the screen to show an immediate history of sensor data.","title":"Major features"},{"location":"#development-features","text":"Visual and audible alarms when flow stoppage or leakage rates are detected. Closed loop air volume control with backup respiration rates and supplemental O 2 . GPIO interface with other systems. Display statistics in conformance with Rapidly Manufactured Ventilator Standards .","title":"Development features"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#whats-the-difference-between-cpap-and-bipap-machines","text":"The Airsense 10 that we have modified is a low cost sleep therapy device that provides a Constant Positive Air Pressure to help with sleep apnea and other disorders. This CPAP mode applies constant pressure to the lungs, but it does not ventilate, or let air move in and out of the lungs. The BiPAP machines are more capable devices to treat sleep apnea and COPD that provide Bi-level Positive Airway Pressure. Bi-level pressure triggers on patient breaths, applying higher pressure when the patient tries to breathe in, and a lower pressure when the patient tries to exhale. This is what's called a support mode, which provides additional pressure support to a patient's natural breathing. These differences apply to the devices as they function out of the box . Our work indicates that the actual difference between a low-end CPAP device and a high-end iVAPS device is just a software upgrade . The CPAP machines have many of the same sensors as the more expensive models, and the Airsense 10 CPAP devices include in their firmware all of the other modes, such as iVAPS and BiPAP-ST. When we unlock that mode in software, the CPAP device functions like a much more capable and expensive iVAPS device. This idea, that the difference between CPAP and BiPAP machines is a software change rather than a hardware change, is at the root of our work. If the common, highly distributed CPAP devices could have a software upgrade that turns them into iVAPS or BiPAP-ST devices capable of ventilating COVID patients, that would be a huge boon to the hospitals and health care workers around the world who are struggling with a lack of ventilators or alternatives to treat the influx of COVID patients. Adding a homebrew function to the existing firmware that alternates between pressures with a configurable delay allows the CPAP to effectively function as a Pressure Control Ventilator (PCV) for sedated patients. Enabling the vendor-provided iVAPS mode, along with further customization and new extensions , should make the devices even more flexible and suitable for clinical use.","title":"What's the difference between CPAP and BiPAP machines?"},{"location":"#can-jailbroken-cpap-devices-be-used-to-treat-covid-patients","text":"We want to be very clear here: this modified firmware should not be flashed on CPAP machines and used to treat COVID patients immediately. The firmware that we've developed is an effective demonstration of the capability, and while it has been reviewed and validated by expert researchers, biomedical engineers, and clinical pulmonologists , it has not yet been put through FDA approval. Additionally, the Mt Sinai's protocols for off-label non-invasive ventilation require additional modifications such as viral filter and remote control before the machines would be ready for clinical use.","title":"Can jailbroken CPAP devices be used to treat COVID patients?"},{"location":"#could-hacked-machines-alleviate-the-shortage-of-ventilators","text":"If the manufacturers developed their own firmware updates, or the FDA approves our jailbroken firmware, this could have an extremely large role in bridging the ventilator shortage gap. There are millions of unused or underutilized CPAP and BiPAP devices sitting in closets in America, and roughly another 500,000 units in warehouses in the country. These devices can be used as an alternate ventilator, for low-resource hospitals who are still waiting for the hospital ventilators to arrive.","title":"Could hacked machines alleviate the shortage of ventilators?"},{"location":"#could-homebrew-firmware-go-through-fda-approval","text":"If there were no other option, our firmware could go through FDA approval, but we believe that the best route for rolling out these upgrades is to work with the manufacturers to use their resources to validate and distribute these upgrades safely and at scale. There are three main factors at play here: The first is a regulatory/safety one: Under the recently-released FDA guidance on hardware and software modification of CPAP and BiPAP devices to treat COVID patients, the manufacturer has carte blanche to release an updated version of their firmware for their own devices without requiring explicit FDA approval -- they are in the best position from a technical, expertise, safety and regulatory perspective. The second is a practical one: There are many different models of CPAP and BiPAP devices, and reverse-engineering is a slow and painful process. We modified the firmware on the most common model of CPAP in America in about a week, but to get lots of ventilators quickly, you'd need a firmware modification for every mode of CPAP. What we've found in our work is that the work needed for the manufacturer to implement these upgrades is pretty minimal -- the manufacturer has access to the source code, to the schematics, and to the engineers who are intimately familiar with physiology and safety standards. We've found that, in many cases, the bulk of the work has already gone through FDA approval, like the iVAPS menu that is in the firmware on the ResMed Airsense device shown above. Even if other manufacturers had not written a line of code for their CPAP models, the pressure-control ventilator mode that we were able to implement is very simple to develop, designed to work on every CPAP device in existence, and would be a very low technology and regulatory barrier for manufacturers with the right people and resources. The third is related to making these jailbreaks at scale: We could take in every unused CPAP device in the country, unscrew the case and re-flash the firmware . It's slow and expensive but could be solved with lots and lots of people. The thing is, of the 8 million CPAPs in the country, almost all 5 million shipped over the last 3 years have an always-on cellular IoT connection, reporting back usage information to doctors and insurance companies. That cellular connection also has over-the-air upgrade capability that can only be accessed from within the IT infrastructure of the device manufacturers. This is a big deal -- it means that they can selectively upgrade, by serial number, specific units to function as ventilators, without having to open them up -- it can all work over the air.","title":"Could homebrew firmware go through FDA approval?"},{"location":"#so-whats-the-point","text":"What our firmware does is show that it is possible to re-program these devices in a way that doctors can use to effectively ventilate COVID patients. We have been able to confirm the functionality of the devices in instrumented patient circuits operated by experts in pulmonological measurement. And there are doctors who agree that, if they had an FDA-approved machine that could that can do what these machines are doing, then they could use them to clinically ventilate COVID patients in an ICU. We do have a path to get this firmware through FDA, and we would apply for FDA approval under the Emergency Use Authorization if the manufacturers absolutely refused to cooperate, but the safest and best path is for the manufacturers to enable this upgrade on their own. Separately from the very pressing COVID issues, Airbreak allows CPAP device owners to write their own extensions to customize their devices for their needs , similar to what the Magic Lantern firmware does for cameras. They can add features like the on-screen graphs shown above, or integrate external systems through the expansion port. Additionally, these tools allow the owners and users to gain a better understand their own therapy by gaining access to the sensors on the device.","title":"So what's the point?"},{"location":"#more-details","text":"Laboratory evaluation Disassembly and wiring instructions Firmware flashing guide Writing extensions github.com/osresearch/airbreak info@airbreak.dev","title":"More details"},{"location":"disassembly/","text":"Disassembly In order to dump and replace the device firmware, we need to access the programming port. Unfortunately it is inside the machine so it requires some disassembly to reach. Tools You will need the following: Torx T10 ST-Link/V2 STM32 programmer or clone TC2050-IDC or TC2050-ICD-NL programming adapter 4 male-female 0.1\" jumpers Computer with OpenOCD and some Unix familiarity arm-none-eabi-gcc to compile extensions (not necessary to unlock the device) It is difficult but possible to solder directly to the PCB, which relaxes the requirement for the jumpers and programming adapter. For more information on this, see the list of useful test points . First you'll need a Torx T10 driver to remove unscrew the four faceplate screws. The bottom latches need to be pried open with a flat head or a spudger. The knob needs to be pulled firmly straight away from the board to remove it, which will allow the gasket to be removed. This can be done from the front-side by popping the latches at the bottom (which are accessible), then squeezing the two latches inward on the left and right-side of the gasket around the middle. Be careful while popping it off the start button on the top of the device (see components list for the part number if replacement needed). It is not necessary to remove the circuit board from the device. Wiring TC2050-IDC is useful for development since it has legs that attach to the board. For higher throughput flashing the TC2050-ICD-NL is easier to hookup, but requires someone to hold it in place while the device is reflashed with custom firmware. The pinout of this port is not the usual 10-pin ARM debug header; it combines the programming pins for the STM32 that is the main controller, the auxiliary STM8, and the power watchdog IC. Board footprint layout (you don't need this unless you're soldering to the board): Function Pin Pin Function STM32_VDD 1 (square) 10 STM32_NRST STM32_SWDIO/PMIC_TMS 2 9 STM8_SWIM STM8_VDD 3 8 PMIC_TDI STM32_SWCLK/PMIC_TCK 4 7 STM8_NRST GND 5 6 PMIC_TDO NOTE1: This follows the TC2050 pinout scheme, which is similar to \"IC\" pinouts (down one side, up the other). NOTE2: The PMIC also shares some of the data pins. The ST-Link/V2 programming device is used for flashing and debugging the code on the STM32. It has a different pinout from the TC2050 cable, so it is necessary to use some male-female 0.1\" jumpers to connect the four STM32 programming pins on the TC2050 to the STlink. TC2050 ribbon cable pinout: Function Pin Pin Function STM32_VDD 1 (red) 2 STM32_SWDIO STM8_VDD 3 4 STM32_SWCLK GND 5 6 PMIC_TDO STM8_NRST 7 8 PMIC_TDI STM8_SWIM 9 10 STM32_NRST STlink-V2 pinout: Function Pin Pin Function STM32_VDD 1 2 NC NC 3 4 NC NC 5 6 NC STM32_SWDIO 7 8 NC STM32_SWCLK 9 10 NC NC 11 12 NC NC 13 14 NC STM32_NRST 15 16 NC NC 17 18 NC NC 19 20 GND Warning A genuine ST-Link programmer uses the STM32_VDD pin to detect the target voltage, not to provide power. Connecting a generic programmer or a Raspberry Pi with this pin configuration will cause the programmer to be back-powered through the AirSense PCB. If you are using a SWD programmer other than a genuine ST-Link, do not hook up STM32_VDD to your 3.3V pin or you may risk damaging your board, programmer, or both! The following image shows the connections with the typcal low-cost ST-Link (note no VCC!). Finally, you may wish to disconnect the cellular daughterboard (circled, left) and humidifier (circled, right) so that the device does not 'phone home' or attempt to heat an empty water tank. Okay, now you're ready to flash the firmware!","title":"Disassembly"},{"location":"disassembly/#disassembly","text":"In order to dump and replace the device firmware, we need to access the programming port. Unfortunately it is inside the machine so it requires some disassembly to reach.","title":"Disassembly"},{"location":"disassembly/#tools","text":"You will need the following: Torx T10 ST-Link/V2 STM32 programmer or clone TC2050-IDC or TC2050-ICD-NL programming adapter 4 male-female 0.1\" jumpers Computer with OpenOCD and some Unix familiarity arm-none-eabi-gcc to compile extensions (not necessary to unlock the device) It is difficult but possible to solder directly to the PCB, which relaxes the requirement for the jumpers and programming adapter. For more information on this, see the list of useful test points . First you'll need a Torx T10 driver to remove unscrew the four faceplate screws. The bottom latches need to be pried open with a flat head or a spudger. The knob needs to be pulled firmly straight away from the board to remove it, which will allow the gasket to be removed. This can be done from the front-side by popping the latches at the bottom (which are accessible), then squeezing the two latches inward on the left and right-side of the gasket around the middle. Be careful while popping it off the start button on the top of the device (see components list for the part number if replacement needed). It is not necessary to remove the circuit board from the device.","title":"Tools"},{"location":"disassembly/#wiring","text":"TC2050-IDC is useful for development since it has legs that attach to the board. For higher throughput flashing the TC2050-ICD-NL is easier to hookup, but requires someone to hold it in place while the device is reflashed with custom firmware. The pinout of this port is not the usual 10-pin ARM debug header; it combines the programming pins for the STM32 that is the main controller, the auxiliary STM8, and the power watchdog IC. Board footprint layout (you don't need this unless you're soldering to the board): Function Pin Pin Function STM32_VDD 1 (square) 10 STM32_NRST STM32_SWDIO/PMIC_TMS 2 9 STM8_SWIM STM8_VDD 3 8 PMIC_TDI STM32_SWCLK/PMIC_TCK 4 7 STM8_NRST GND 5 6 PMIC_TDO NOTE1: This follows the TC2050 pinout scheme, which is similar to \"IC\" pinouts (down one side, up the other). NOTE2: The PMIC also shares some of the data pins. The ST-Link/V2 programming device is used for flashing and debugging the code on the STM32. It has a different pinout from the TC2050 cable, so it is necessary to use some male-female 0.1\" jumpers to connect the four STM32 programming pins on the TC2050 to the STlink. TC2050 ribbon cable pinout: Function Pin Pin Function STM32_VDD 1 (red) 2 STM32_SWDIO STM8_VDD 3 4 STM32_SWCLK GND 5 6 PMIC_TDO STM8_NRST 7 8 PMIC_TDI STM8_SWIM 9 10 STM32_NRST STlink-V2 pinout: Function Pin Pin Function STM32_VDD 1 2 NC NC 3 4 NC NC 5 6 NC STM32_SWDIO 7 8 NC STM32_SWCLK 9 10 NC NC 11 12 NC NC 13 14 NC STM32_NRST 15 16 NC NC 17 18 NC NC 19 20 GND Warning A genuine ST-Link programmer uses the STM32_VDD pin to detect the target voltage, not to provide power. Connecting a generic programmer or a Raspberry Pi with this pin configuration will cause the programmer to be back-powered through the AirSense PCB. If you are using a SWD programmer other than a genuine ST-Link, do not hook up STM32_VDD to your 3.3V pin or you may risk damaging your board, programmer, or both! The following image shows the connections with the typcal low-cost ST-Link (note no VCC!). Finally, you may wish to disconnect the cellular daughterboard (circled, left) and humidifier (circled, right) so that the device does not 'phone home' or attempt to heat an empty water tank. Okay, now you're ready to flash the firmware!","title":"Wiring"},{"location":"evaluation/","text":"Laboratory Evaluation Setup The firmware release was flashed onto the unit and run through a series of tests over the course of 3 days. Maximum pressure, minimum pressure, time at high pressure and time at low pressure were adjusted and measurements made for a subset of the test conditions outlined in table 201.105 of ISO standard 80601-2-12 . A 3L bag designed to emulate the lung was salvaged from a consumables kit used on an anesthesia machine. The patient circuit was constructed in accordance with the Mt. Sinai protocol to include a high resistance expiratory port and supplemental oxygen . Air flow rate and pressure were measured using Honeywell pressure chips and a National Instruments data acquisition board. Pressure was sent through a low pass filter and calibrated using a standardized, adjustable pressure column at 0, 15.0 and 30.0 cm H 2 O. Flow waveforms were acquired as a differential pressure and calibrated using standard 0.6, 1 and 3 L syringes and integrated to calculate tidal volumes using MATLAB. A tube was filled with polymeric stuffing until physiologic resistance was achieved. Resistance and compliance were calculated from the measured pressure volume loop. Resistance was measured to be around 13.4 cm H 2 O/L/s and compliance was measured to be 35.7 ml/cm H 2 O. The test set-up is pictured in figure 1. Results A few test cases are presented to illustrate the high end of the performance range. The unit was set to a maximum pressure of 30 cm H 2 O, a minimum pressure of 4 cm H 2 O, high pressure time of 1 second (inspiration) and low pressure time of 2 seconds (expiration). Results are plotted in figure 2. Tidal volumes were calculated to be 629 \u00b1 0.80 mL. The system took approximately 5 minutes to equilibrate and held stable for > 24 hours. Peak pressures were centered around the set point of 30 cm H 2 O with a range of approximately 29-32 cm H 2 O while minimum pressures were also centered around the setpoint of 5 cm H 2 O with a range of approximately 4-6 cm H 2 O. Supplemental oxygen was then supplied at a rates of 10, 15 and 20 liters per minute. Linear increases in tidal volume were observed. At 15 L/min of oxygen, the tidal volume increased by approximately 20 mL. Next steps in validation are to compare time series data from the unit with measured values. These tests were done anecdotally but should be further characterized. Pressures measured experimentally aligned well with those reported by the unit. Flow (tidal volume) measurements made experimentally appear to be higher than those reported by the unit. This could be expected due to measurement error along with the patient circuit between the unit\u2019s flow sensor and the experimental transducers. Initial data indicated tidal volumes at the test lung are approximately 20% higher than those reported by the unit. Further investigation and characterization is warranted.","title":"Evaluation"},{"location":"evaluation/#laboratory-evaluation","text":"","title":"Laboratory Evaluation"},{"location":"evaluation/#setup","text":"The firmware release was flashed onto the unit and run through a series of tests over the course of 3 days. Maximum pressure, minimum pressure, time at high pressure and time at low pressure were adjusted and measurements made for a subset of the test conditions outlined in table 201.105 of ISO standard 80601-2-12 . A 3L bag designed to emulate the lung was salvaged from a consumables kit used on an anesthesia machine. The patient circuit was constructed in accordance with the Mt. Sinai protocol to include a high resistance expiratory port and supplemental oxygen . Air flow rate and pressure were measured using Honeywell pressure chips and a National Instruments data acquisition board. Pressure was sent through a low pass filter and calibrated using a standardized, adjustable pressure column at 0, 15.0 and 30.0 cm H 2 O. Flow waveforms were acquired as a differential pressure and calibrated using standard 0.6, 1 and 3 L syringes and integrated to calculate tidal volumes using MATLAB. A tube was filled with polymeric stuffing until physiologic resistance was achieved. Resistance and compliance were calculated from the measured pressure volume loop. Resistance was measured to be around 13.4 cm H 2 O/L/s and compliance was measured to be 35.7 ml/cm H 2 O. The test set-up is pictured in figure 1.","title":"Setup"},{"location":"evaluation/#results","text":"A few test cases are presented to illustrate the high end of the performance range. The unit was set to a maximum pressure of 30 cm H 2 O, a minimum pressure of 4 cm H 2 O, high pressure time of 1 second (inspiration) and low pressure time of 2 seconds (expiration). Results are plotted in figure 2. Tidal volumes were calculated to be 629 \u00b1 0.80 mL. The system took approximately 5 minutes to equilibrate and held stable for > 24 hours. Peak pressures were centered around the set point of 30 cm H 2 O with a range of approximately 29-32 cm H 2 O while minimum pressures were also centered around the setpoint of 5 cm H 2 O with a range of approximately 4-6 cm H 2 O. Supplemental oxygen was then supplied at a rates of 10, 15 and 20 liters per minute. Linear increases in tidal volume were observed. At 15 L/min of oxygen, the tidal volume increased by approximately 20 mL. Next steps in validation are to compare time series data from the unit with measured values. These tests were done anecdotally but should be further characterized. Pressures measured experimentally aligned well with those reported by the unit. Flow (tidal volume) measurements made experimentally appear to be higher than those reported by the unit. This could be expected due to measurement error along with the patient circuit between the unit\u2019s flow sensor and the experimental transducers. Initial data indicated tidal volumes at the test lung are approximately 20% higher than those reported by the unit. Further investigation and characterization is warranted.","title":"Results"},{"location":"firmware/","text":"Firmware Connecting to Device Note If you are using Windows, the steps in this section will be slightly different. Please see the Windows guide for more information. We are going to use the open-source OpenOCD debug interface to access the device. First, make sure this repository is cloned and located in your working directory. Make sure your programmer is attached to the PCB , then start OpenOCD. If you are using a programmer other than the STlink, you will need to select the correct interface. sudo openocd -f interface/stlink.cfg -f 'tcl/airsense.cfg' If your device is connected properly, you should see a bunch of output, ending with: Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints In another terminal, connect to the OpenOCD server: telnet localhost 4444 Once your OpenOCD console is successfully connected, you can continue to the next step. Dumping Vendor Firmware Warning This step is mandatory. Each subsequent step requires an original copy of the device firmware to be present in the working directory. With an original copy of the firmware, the device can always be restored to factory settings. If you lose the original firmware, you risk bricking your device! Type the following into your OpenOCD console: dump After several seconds, your device's main firmware should be backed-up to stm32.bin in the working directory - it should be exactly 1MB. Building Alternate Firmware In a third terminal window, patch the extracted firmware at stm32.bin with the patch-airsense script. This will unlock the vendor modes and configuration bits. ./patch-airsense stm32.bin stm32-unlocked.bin There are several features configurable via the patch-airsense script, some of which are simple binary patches and some of which require a 32-bit ARM toolchain. Set them as desired per the documentation here . The script might fail if the hashes of your extracted firmware do not match the one that it expects (currently SX567-0401 ). If you have a different version, please contact us for how to proceed. Flashing Now reflash the device with the modified firmware by going back to the OpenOCD console terminal and running: flash_new stm32-unlocked.bin This step takes around 20 seconds and the device should reboot afterwards. Testing After the device has been reflashed and rebooted, you can enter the clinician menu (hold down the Home button while pushing on the knob for three seconds), and you should be able to select from all of the vendor modes, including iVAPS and ST. These modes potentially allow the CPAP device to immediately be used according to the Mt Sinai BiPAP protocol. The flashing is a one-time operation. The programmer can be unplugged and moved to another device. Remember to keep a backup of the vendor firmware. Restoring Vendor Firmware In order for the vendor firmware to flash properly, it is necessary to write variables to the device's backup memory in a certain sequence. The following OpenOCD command will do that: flash_new stm32.bin","title":"Firmware"},{"location":"firmware/#firmware","text":"","title":"Firmware"},{"location":"firmware/#connecting-to-device","text":"Note If you are using Windows, the steps in this section will be slightly different. Please see the Windows guide for more information. We are going to use the open-source OpenOCD debug interface to access the device. First, make sure this repository is cloned and located in your working directory. Make sure your programmer is attached to the PCB , then start OpenOCD. If you are using a programmer other than the STlink, you will need to select the correct interface. sudo openocd -f interface/stlink.cfg -f 'tcl/airsense.cfg' If your device is connected properly, you should see a bunch of output, ending with: Info : stm32f4x.cpu: hardware has 6 breakpoints, 4 watchpoints In another terminal, connect to the OpenOCD server: telnet localhost 4444 Once your OpenOCD console is successfully connected, you can continue to the next step.","title":"Connecting to Device"},{"location":"firmware/#dumping-vendor-firmware","text":"Warning This step is mandatory. Each subsequent step requires an original copy of the device firmware to be present in the working directory. With an original copy of the firmware, the device can always be restored to factory settings. If you lose the original firmware, you risk bricking your device! Type the following into your OpenOCD console: dump After several seconds, your device's main firmware should be backed-up to stm32.bin in the working directory - it should be exactly 1MB.","title":"Dumping Vendor Firmware"},{"location":"firmware/#building-alternate-firmware","text":"In a third terminal window, patch the extracted firmware at stm32.bin with the patch-airsense script. This will unlock the vendor modes and configuration bits. ./patch-airsense stm32.bin stm32-unlocked.bin There are several features configurable via the patch-airsense script, some of which are simple binary patches and some of which require a 32-bit ARM toolchain. Set them as desired per the documentation here . The script might fail if the hashes of your extracted firmware do not match the one that it expects (currently SX567-0401 ). If you have a different version, please contact us for how to proceed.","title":"Building Alternate Firmware"},{"location":"firmware/#flashing","text":"Now reflash the device with the modified firmware by going back to the OpenOCD console terminal and running: flash_new stm32-unlocked.bin This step takes around 20 seconds and the device should reboot afterwards.","title":"Flashing"},{"location":"firmware/#testing","text":"After the device has been reflashed and rebooted, you can enter the clinician menu (hold down the Home button while pushing on the knob for three seconds), and you should be able to select from all of the vendor modes, including iVAPS and ST. These modes potentially allow the CPAP device to immediately be used according to the Mt Sinai BiPAP protocol. The flashing is a one-time operation. The programmer can be unplugged and moved to another device. Remember to keep a backup of the vendor firmware.","title":"Testing"},{"location":"firmware/#restoring-vendor-firmware","text":"In order for the vendor firmware to flash properly, it is necessary to write variables to the device's backup memory in a certain sequence. The following OpenOCD command will do that: flash_new stm32.bin","title":"Restoring Vendor Firmware"},{"location":"adapter_pcbs/acc_breakout_basic/","text":"Accessory Board Edge Connector Breakout Small PCB that fits into the accessory port on the side. Originally designed for building out the monitor USART connection. This board is designed to be millable on a Bantam PCB mill so makes some odd-looking PCB design choices. As there is no PTH you'll notice headers were put on each side in photo below. You will need to use both 1/32\" and 1/64\" end mills. You can freely send the board away to be made of course too. WARNING : Sanding FR4 material creates dangerous dust. If you need to bevel the edge use appropriate precautions such as sanding under water. PCB Source Format PCB design files are in Altium Designer source (sorry). Sizes The card edge dimensions are roughly based on a standard card-edge, see example connector spec that includes PCB sizes . Board should be 15 mm width (or a little less). The gerber files have a small board outline width to ensure Bantam software gives correct edge size (otherwise may mill on outside edge). The connectors are on 2.54mm (0.100\" grid). Other spacing shown below: Pinout Notes See pinout stored in rest of project, the following shows pinout of hedaers relative to pin numbers marked on main-board part number: Note that pin 2 is +24V and is NOT connected to the header. Add the wire if you need it, but assumed more people will be sad-face about brushing +24V against their 3.3V USART adapter than would use the +24V for debug.","title":"Accessory Board Edge Connector Breakout"},{"location":"adapter_pcbs/acc_breakout_basic/#accessory-board-edge-connector-breakout","text":"Small PCB that fits into the accessory port on the side. Originally designed for building out the monitor USART connection. This board is designed to be millable on a Bantam PCB mill so makes some odd-looking PCB design choices. As there is no PTH you'll notice headers were put on each side in photo below. You will need to use both 1/32\" and 1/64\" end mills. You can freely send the board away to be made of course too. WARNING : Sanding FR4 material creates dangerous dust. If you need to bevel the edge use appropriate precautions such as sanding under water.","title":"Accessory Board Edge Connector Breakout"},{"location":"adapter_pcbs/acc_breakout_basic/#pcb-source-format","text":"PCB design files are in Altium Designer source (sorry).","title":"PCB Source Format"},{"location":"adapter_pcbs/acc_breakout_basic/#sizes","text":"The card edge dimensions are roughly based on a standard card-edge, see example connector spec that includes PCB sizes . Board should be 15 mm width (or a little less). The gerber files have a small board outline width to ensure Bantam software gives correct edge size (otherwise may mill on outside edge). The connectors are on 2.54mm (0.100\" grid). Other spacing shown below:","title":"Sizes"},{"location":"adapter_pcbs/acc_breakout_basic/#pinout-notes","text":"See pinout stored in rest of project, the following shows pinout of hedaers relative to pin numbers marked on main-board part number: Note that pin 2 is +24V and is NOT connected to the header. Add the wire if you need it, but assumed more people will be sad-face about brushing +24V against their 3.3V USART adapter than would use the +24V for debug.","title":"Pinout Notes"},{"location":"adapter_pcbs/acc_breakout_basic/gerbers/","text":"The gerber file naming should match what is expected on OSHPark.","title":"Index"},{"location":"info/extensions/","text":"Writing extensions There are currently two example extensions: breath.c and graph.c . The breathing mod implements a Pressure Control Ventilator with programmable pressure and respiration rate. The graphing mod adds a strip chart for the current commanded pressure and the actual output pressure. This is similar to Magic Lantern , since we use the existing vendor firmware as a library with functions at fixed addresses and fit into the empty space around the flash image. The Ghidra XML file can be converted into the stubs.S that provides labels at the fixed locations. More documentation needs to be written. Ghidra files. Data structures. Configuration and variables. GUI library is based on the closed source emwin, although the reference manual is available and can be used to derive the headers and structures required to interface with the library. GPIO library is the STM32 Standard Peripheral Library. There is a hard-float unit in the CPU, but some float/double ops seem to cause a fault. Be sure that all of your constants have an explicit float type like 0.1f , otherwise gcc will use doubles.","title":"Development"},{"location":"info/extensions/#writing-extensions","text":"There are currently two example extensions: breath.c and graph.c . The breathing mod implements a Pressure Control Ventilator with programmable pressure and respiration rate. The graphing mod adds a strip chart for the current commanded pressure and the actual output pressure. This is similar to Magic Lantern , since we use the existing vendor firmware as a library with functions at fixed addresses and fit into the empty space around the flash image. The Ghidra XML file can be converted into the stubs.S that provides labels at the fixed locations. More documentation needs to be written. Ghidra files. Data structures. Configuration and variables. GUI library is based on the closed source emwin, although the reference manual is available and can be used to derive the headers and structures required to interface with the library. GPIO library is the STM32 Standard Peripheral Library. There is a hard-float unit in the CPU, but some float/double ops seem to cause a fault. Be sure that all of your constants have an explicit float type like 0.1f , otherwise gcc will use doubles.","title":"Writing extensions"},{"location":"info/firmware-docs/","text":"Firmware Documentation Coming Soon","title":"Documentation"},{"location":"info/firmware-docs/#firmware-documentation","text":"Coming Soon","title":"Firmware Documentation"},{"location":"info/hardware/","text":"Airsense S10 Hardware This page aggregates hardware details about the Airsense S10 electronics and other information that may be relevant to the reverse engineering process. FCC Filings One crucial reverse engineering resource is the FCC documentation for the AirSense S10 , which includes external and internal schematics and user manuals. The FCC filings for the AirCurve BiPAP , currently in use as an emergency ventilator, shows very similar electronics. Clinical Manuals Clinical manuals for the assisted-breathing devices from this manufacturer provide a great deal of insight into the various models in the AirSet and AirCurve lines, as well as the ventilation features available in each one. Many of the menu options restricted to other models can be enabled by flipping configuration bits in the firmware. Components Here are some of the components on the AirSense S10 main PCB. Part Part No. Manufacturer Reference Additional Main uC STM32F405ZGT6 (LQFP144) STMicroelectronics Datasheet Reference Manual Aux uC STM8S005 (TQFP48) STMicroelectronics Datasheet Reference Manual Power watchdog IC POWR605 Lattice Datasheet Monitors pressures - see notes below. Main Pressure Sensor NPA-300M-015A Amphenol Datasheet Operates in analog mode Differential Pressure Sensor SDP8xx Sensirion Datasheet Digital mode, manifold mount Programming Header TC2050-IDC Tag-Connect LLC DigiKey Motor Driver DRV8302 Texas Instruments DigiKey Serial EEPROM M95M02 STMicroelectronics Datasheet LCD TM024HDZ29 Tianma Similar datasheets Closest we could find Relay Driver A2550 Allegro Datasheet Function unknown; accessory? Logic Voltage Regulator (x2) ISL9000A Renesas Datasheet Generates 3.3v and 5v logic voltages Top Switch B3F-3125 Omrom Digikey In case switch needs to be replaced (confirmed exact fit). Power Watchdog The power watchdog IC (POWR605) is a complicated power watch-dog IC. More than just a basic device, it contains: 6 DC power monitoring inputs. 16 macrocell PLD logic. 4 timers. The 6 inputs have programmable thresholds (despite what the datasheet implies about fixed). This device is important as appears to be used as a \"safety\" on pressure sensors. If pressures are too far out-of-spec it will reset the main STM32F407ZG microcontroller. More reverse engineering is needed to understand the exact connection here. The POWR605 logic should be reprogrammable via the tag-connect header. The following works (but may not be easiest/lowest-cost): \"Lattice Diamond\" programming software. Programming Cable supported by above (such as HW-USBN-2B). Lattice \"PAC-Designer\" software. To read the device, ensure you configure the Lattice Diamond SW to perform a \"JEDEC Readback\" - the default operation is erase/program/verify. This will then generate a .jed file. From PAC-Designer, create a new project with the POWR605. You can then use the Import option to open the .jed to see configuration.","title":"Airsense S10 Hardware"},{"location":"info/hardware/#airsense-s10-hardware","text":"This page aggregates hardware details about the Airsense S10 electronics and other information that may be relevant to the reverse engineering process.","title":"Airsense S10 Hardware"},{"location":"info/hardware/#fcc-filings","text":"One crucial reverse engineering resource is the FCC documentation for the AirSense S10 , which includes external and internal schematics and user manuals. The FCC filings for the AirCurve BiPAP , currently in use as an emergency ventilator, shows very similar electronics.","title":"FCC Filings"},{"location":"info/hardware/#clinical-manuals","text":"Clinical manuals for the assisted-breathing devices from this manufacturer provide a great deal of insight into the various models in the AirSet and AirCurve lines, as well as the ventilation features available in each one. Many of the menu options restricted to other models can be enabled by flipping configuration bits in the firmware.","title":"Clinical Manuals"},{"location":"info/hardware/#components","text":"Here are some of the components on the AirSense S10 main PCB. Part Part No. Manufacturer Reference Additional Main uC STM32F405ZGT6 (LQFP144) STMicroelectronics Datasheet Reference Manual Aux uC STM8S005 (TQFP48) STMicroelectronics Datasheet Reference Manual Power watchdog IC POWR605 Lattice Datasheet Monitors pressures - see notes below. Main Pressure Sensor NPA-300M-015A Amphenol Datasheet Operates in analog mode Differential Pressure Sensor SDP8xx Sensirion Datasheet Digital mode, manifold mount Programming Header TC2050-IDC Tag-Connect LLC DigiKey Motor Driver DRV8302 Texas Instruments DigiKey Serial EEPROM M95M02 STMicroelectronics Datasheet LCD TM024HDZ29 Tianma Similar datasheets Closest we could find Relay Driver A2550 Allegro Datasheet Function unknown; accessory? Logic Voltage Regulator (x2) ISL9000A Renesas Datasheet Generates 3.3v and 5v logic voltages Top Switch B3F-3125 Omrom Digikey In case switch needs to be replaced (confirmed exact fit).","title":"Components"},{"location":"info/hardware/#power-watchdog","text":"The power watchdog IC (POWR605) is a complicated power watch-dog IC. More than just a basic device, it contains: 6 DC power monitoring inputs. 16 macrocell PLD logic. 4 timers. The 6 inputs have programmable thresholds (despite what the datasheet implies about fixed). This device is important as appears to be used as a \"safety\" on pressure sensors. If pressures are too far out-of-spec it will reset the main STM32F407ZG microcontroller. More reverse engineering is needed to understand the exact connection here. The POWR605 logic should be reprogrammable via the tag-connect header. The following works (but may not be easiest/lowest-cost): \"Lattice Diamond\" programming software. Programming Cable supported by above (such as HW-USBN-2B). Lattice \"PAC-Designer\" software. To read the device, ensure you configure the Lattice Diamond SW to perform a \"JEDEC Readback\" - the default operation is erase/program/verify. This will then generate a .jed file. From PAC-Designer, create a new project with the POWR605. You can then use the Import option to open the .jed to see configuration.","title":"Power Watchdog"},{"location":"info/pinouts/","text":"Pinouts STM32 STM32 Pin# GPIO - Peripheral Pin Function 34 PA00 - Aux uC 47 WKUP 37 PA03 - Aux uC 47 USART2_RX 40 PA04 - 1x2 Header 1 41 PA05 - 1x2 Header 2 100 PA08 - Motor Driver 21 INH_C 101 PA09 - Motor Driver 19 INH_B 102 PA10 - Motor Driver 17 INH_A 105 PA13 - Programming Header 2 SWDIO 109 PA14 - Programming Header 4 SWCLK 110 PA15 - EEPROM 1 ~CS 47 PB01 - POWR605 5 VMON4 136 PB06 - LTE header 2 USART1_TX 137 PB07 - LTE header 3 USART1_RX 139 PB08 - Diff Pressure Sensor SCL 140 PB09 - Diff Pressure Sensor SDA 69 PB10 - Blue edge connector 9 USART3_TX 70 PB11 - Blue edge connector 7 USART3_RX 74 PB13 - Motor Driver 22 INL_C 75 PB14 - Motor Driver 20 INL_B 76 PB15 - Motor Driver 18 INL_A 44 PC04 - Pressure Sensor 8 98 PC08 - SD Card DAT0/D0 99 PC09 - SD Card DAT1/IRQ 111 PC10 - SD Card 9 DAT2/NC 112 PC11 - SD Card 1 DAT3/~CS 113 PC12 - SD Card 5 SCK 8 PC14 - OSC OSC32_IN 9 PC15 - OSC OSC32_OUT 114 PD00 - SRAM 9 IO_2 115 PD01 - SRAM 10 IO_3 116 PD02 - SD Card 2 CMD/DI 118 PD04 - SRAM 41 ~OE 119 PD05 - SRAM 17 ~WE 77 PD08 - SRAM 36 IO_13 78 PD09 - SRAM 37 IO_14 79 PD10 - SRAM 38 IO_15 80 PD11 - SRAM 18 ADDR_16 81 PD12 - SRAM 23 NC 85 PD14 - SRAM 7 IO_0 86 PD15 - SRAM 8 IO_1 141 PE00 - SRAM 39 ~LB 142 PE01 - SRAM 40 ~UB 1 PE02 - Motor Driver 5 nOCTW 2 PE03 - Motor Driver 6 nFAULT 3 PE04 - LCD 12 4 PE05 - SD Card 6 (on board) Pulled low when SD card inserted 58 PE07 - SRAM 13 IO_4 59 PE08 - SRAM 14 IO_5 60 PE09 - SRAM 15 IO_6 63 PE10 - SRAM 16 IO_7 64 PE11 - SRAM 29 IO_8 65 PE12 - SRAM 30 IO_9 66 PE13 - SRAM 31 IO_10 67 PE14 - SRAM 32 IO_11 68 PE15 - SRAM 35 IO_12 10 PF00 - SRAM 5 ADDR_0 11 PF01 - SRAM 4 ADDR_1 12 PF02 - SRAM 3 ADDR_2 13 PF03 - SRAM 2 ADDR_3 14 PF04 - SRAM 1 ADDR_4 15 PF05 - SRAM 44 ADDR_5 49 PF11 - Button/Encoder Close to D4007 Label 53 PF13 - SRAM 42 ADDR_7 54 PF14 - SRAM 27 ADDR_8 55 PF15 - SRAM 26 ADDR_9 56 PG00 - SRAM 25 ADDR_10 57 PG01 - SRAM 24 ADDR_11 92 PG07 - Home Button 93 PG08 - Power Button 127 PG12 - POWR605 15 IN_OUT5 128 PG13 - POWR605 17 IN_OUT4 23 PH00 - OSC 1 OSC_IN 24 PH01 - OSC 2 OSC_OUT Accessory Connector The accessory connector is a blue edge-connect PCB connector. See the example pcb for the layout of a mating PCB. The following table matches the pinout when looking into the side connector: Pin # Function xxx Pin # Function 9 TX (Out) ------ 10 ? 7 RX (In) ------ 8 GND 5 ? ------ 6 ? 3 ? ------ 4 ? 1 ? ------ 2 +24V","title":"Pinouts"},{"location":"info/pinouts/#pinouts","text":"","title":"Pinouts"},{"location":"info/pinouts/#stm32","text":"STM32 Pin# GPIO - Peripheral Pin Function 34 PA00 - Aux uC 47 WKUP 37 PA03 - Aux uC 47 USART2_RX 40 PA04 - 1x2 Header 1 41 PA05 - 1x2 Header 2 100 PA08 - Motor Driver 21 INH_C 101 PA09 - Motor Driver 19 INH_B 102 PA10 - Motor Driver 17 INH_A 105 PA13 - Programming Header 2 SWDIO 109 PA14 - Programming Header 4 SWCLK 110 PA15 - EEPROM 1 ~CS 47 PB01 - POWR605 5 VMON4 136 PB06 - LTE header 2 USART1_TX 137 PB07 - LTE header 3 USART1_RX 139 PB08 - Diff Pressure Sensor SCL 140 PB09 - Diff Pressure Sensor SDA 69 PB10 - Blue edge connector 9 USART3_TX 70 PB11 - Blue edge connector 7 USART3_RX 74 PB13 - Motor Driver 22 INL_C 75 PB14 - Motor Driver 20 INL_B 76 PB15 - Motor Driver 18 INL_A 44 PC04 - Pressure Sensor 8 98 PC08 - SD Card DAT0/D0 99 PC09 - SD Card DAT1/IRQ 111 PC10 - SD Card 9 DAT2/NC 112 PC11 - SD Card 1 DAT3/~CS 113 PC12 - SD Card 5 SCK 8 PC14 - OSC OSC32_IN 9 PC15 - OSC OSC32_OUT 114 PD00 - SRAM 9 IO_2 115 PD01 - SRAM 10 IO_3 116 PD02 - SD Card 2 CMD/DI 118 PD04 - SRAM 41 ~OE 119 PD05 - SRAM 17 ~WE 77 PD08 - SRAM 36 IO_13 78 PD09 - SRAM 37 IO_14 79 PD10 - SRAM 38 IO_15 80 PD11 - SRAM 18 ADDR_16 81 PD12 - SRAM 23 NC 85 PD14 - SRAM 7 IO_0 86 PD15 - SRAM 8 IO_1 141 PE00 - SRAM 39 ~LB 142 PE01 - SRAM 40 ~UB 1 PE02 - Motor Driver 5 nOCTW 2 PE03 - Motor Driver 6 nFAULT 3 PE04 - LCD 12 4 PE05 - SD Card 6 (on board) Pulled low when SD card inserted 58 PE07 - SRAM 13 IO_4 59 PE08 - SRAM 14 IO_5 60 PE09 - SRAM 15 IO_6 63 PE10 - SRAM 16 IO_7 64 PE11 - SRAM 29 IO_8 65 PE12 - SRAM 30 IO_9 66 PE13 - SRAM 31 IO_10 67 PE14 - SRAM 32 IO_11 68 PE15 - SRAM 35 IO_12 10 PF00 - SRAM 5 ADDR_0 11 PF01 - SRAM 4 ADDR_1 12 PF02 - SRAM 3 ADDR_2 13 PF03 - SRAM 2 ADDR_3 14 PF04 - SRAM 1 ADDR_4 15 PF05 - SRAM 44 ADDR_5 49 PF11 - Button/Encoder Close to D4007 Label 53 PF13 - SRAM 42 ADDR_7 54 PF14 - SRAM 27 ADDR_8 55 PF15 - SRAM 26 ADDR_9 56 PG00 - SRAM 25 ADDR_10 57 PG01 - SRAM 24 ADDR_11 92 PG07 - Home Button 93 PG08 - Power Button 127 PG12 - POWR605 15 IN_OUT5 128 PG13 - POWR605 17 IN_OUT4 23 PH00 - OSC 1 OSC_IN 24 PH01 - OSC 2 OSC_OUT","title":"STM32"},{"location":"info/pinouts/#accessory-connector","text":"The accessory connector is a blue edge-connect PCB connector. See the example pcb for the layout of a mating PCB. The following table matches the pinout when looking into the side connector: Pin # Function xxx Pin # Function 9 TX (Out) ------ 10 ? 7 RX (In) ------ 8 GND 5 ? ------ 6 ? 3 ? ------ 4 ? 1 ? ------ 2 +24V","title":"Accessory Connector"},{"location":"info/serial-protocol/","text":"Serial Protocol The unit has a serial port at 57600 baud available on accessory-board (see pinouts for pinouts, and adapter pcbs for physical information). This collects some in-progress notes. If you just need to talk a unit for experimentation, you might consider instead the working 'serial monitor' replacement code until this is figured out more. This is assumed to be used with the TX Link device. Information is only available on the S9 version, but the interface connector looks to be the same (not confirmed). Protocol Notes The device will respond to some commands starting with a U . The code can be seen checking for a 0x55 in parts, so this makes sense as some sort of Sync character. Sending for example: UV Will have the unit respond with: UE010 = 6011807B The 807B is a CRC-16 of the preceding ASCII data: import crcmod import crcmod.predefined crc_func = crcmod.predefined.mkCrcFun('crc-ccitt-false') crc = crc_func(b\"UE010 = 6011\") print(str(hex(crc))) Sending U + most characters seems to trip the above response. Some do not respond however suggesting there is \"subcommands\" that are waiting for more data: UQA seems to give no response. UP{A-T,V-Z,0-9} seems to give no response. ULA seems to give no response. The various \"response codes\" can be seen in the firmware. Looking at firmware suggests some commands looking for 3-character code. For example: UL01B (you may need to send it a few times) seems to trip response code 600C . In the firmware, it can be seen that a 3-character string is converted to hex (i.e., 01B in the example becomes 0x1B). Firmware Notes","title":"Serial Protocol"},{"location":"info/serial-protocol/#serial-protocol","text":"The unit has a serial port at 57600 baud available on accessory-board (see pinouts for pinouts, and adapter pcbs for physical information). This collects some in-progress notes. If you just need to talk a unit for experimentation, you might consider instead the working 'serial monitor' replacement code until this is figured out more. This is assumed to be used with the TX Link device. Information is only available on the S9 version, but the interface connector looks to be the same (not confirmed).","title":"Serial Protocol"},{"location":"info/serial-protocol/#protocol-notes","text":"The device will respond to some commands starting with a U . The code can be seen checking for a 0x55 in parts, so this makes sense as some sort of Sync character. Sending for example: UV Will have the unit respond with: UE010 = 6011807B The 807B is a CRC-16 of the preceding ASCII data: import crcmod import crcmod.predefined crc_func = crcmod.predefined.mkCrcFun('crc-ccitt-false') crc = crc_func(b\"UE010 = 6011\") print(str(hex(crc))) Sending U + most characters seems to trip the above response. Some do not respond however suggesting there is \"subcommands\" that are waiting for more data: UQA seems to give no response. UP{A-T,V-Z,0-9} seems to give no response. ULA seems to give no response. The various \"response codes\" can be seen in the firmware. Looking at firmware suggests some commands looking for 3-character code. For example: UL01B (you may need to send it a few times) seems to trip response code 600C . In the firmware, it can be seen that a 3-character string is converted to hex (i.e., 01B in the example becomes 0x1B).","title":"Protocol Notes"},{"location":"info/serial-protocol/#firmware-notes","text":"","title":"Firmware Notes"},{"location":"info/tcl/","text":"OpenOCD Scripts Coming Soon","title":"OpenOCD Scripts"},{"location":"info/tcl/#openocd-scripts","text":"Coming Soon","title":"OpenOCD Scripts"},{"location":"info/testpoints/","text":"Useful Test Points The Airsense S10 mainboard is covered in test points. Here are some that may be of interest. Pin Description STM32_3V3 Core voltage for main uC. GND Ground. SWDIO Used to program and debug main uC. SWCLK Used to program and debug main uC. SWO Could potentially be used to get further debug output from main uC (TBD). STM32_NRST Reset pin for main uC. PSENSOR Scope this to get an analog pressure readout without external equipment. STM8_UART UART_TX from STM8 aux uC to main uC STM8_3V3 Core voltage for aux uC STM8_SWIM Single-wire programming and debug pin for aux uC","title":"Useful Test Points"},{"location":"info/testpoints/#useful-test-points","text":"The Airsense S10 mainboard is covered in test points. Here are some that may be of interest. Pin Description STM32_3V3 Core voltage for main uC. GND Ground. SWDIO Used to program and debug main uC. SWCLK Used to program and debug main uC. SWO Could potentially be used to get further debug output from main uC (TBD). STM32_NRST Reset pin for main uC. PSENSOR Scope this to get an analog pressure readout without external equipment. STM8_UART UART_TX from STM8 aux uC to main uC STM8_3V3 Core voltage for aux uC STM8_SWIM Single-wire programming and debug pin for aux uC","title":"Useful Test Points"},{"location":"info/windows/","text":"Windows Instructions WARNING: Be aware that the STM32F series has a 'code read protection' feature. The only legitimate way to 'disable' this is to perform a chip erase. Current devices investigated do not have this enabled - but if this feature was enabled, you will receive an error message that may say something simple such as \"Do you want to disable read protection?\". If you perform this action, you will have erased the firmware. Programming with ST-Link Utility If using a legitimate or fake ST-Link/V2, you will find it most convient to use the ST-Link utility for basic operation (read/write). To do this, download the ST-Link utility at: https://www.st.com/en/development-tools/stsw-link004.html. Scroll down the page until the \"Get Software\" button is visible. Reading You must use the \"Command Line Interface\" to read flash (the option is not in the ST-Link GUI as of the latest version). Open a command prompt on Windows, and run the following two commands. The first one does the read, the second one verifies it: ST-LINK_CLI.exe -c -dump 0x08000000 0x100000 stm32.bin ST-LINK_CLI.exe -CmpFile stm32.bin 0x8000000 Writing You can either use the GUI to do the writing, or run the following command: ST-LINK_CLI.exe -ME -P stm32-unlocked.bin 0x08000000 -V","title":"Windows Setup Instructions"},{"location":"info/windows/#windows-instructions","text":"WARNING: Be aware that the STM32F series has a 'code read protection' feature. The only legitimate way to 'disable' this is to perform a chip erase. Current devices investigated do not have this enabled - but if this feature was enabled, you will receive an error message that may say something simple such as \"Do you want to disable read protection?\". If you perform this action, you will have erased the firmware.","title":"Windows Instructions"},{"location":"info/windows/#programming-with-st-link-utility","text":"If using a legitimate or fake ST-Link/V2, you will find it most convient to use the ST-Link utility for basic operation (read/write). To do this, download the ST-Link utility at: https://www.st.com/en/development-tools/stsw-link004.html. Scroll down the page until the \"Get Software\" button is visible.","title":"Programming with ST-Link Utility"},{"location":"info/windows/#reading","text":"You must use the \"Command Line Interface\" to read flash (the option is not in the ST-Link GUI as of the latest version). Open a command prompt on Windows, and run the following two commands. The first one does the read, the second one verifies it: ST-LINK_CLI.exe -c -dump 0x08000000 0x100000 stm32.bin ST-LINK_CLI.exe -CmpFile stm32.bin 0x8000000","title":"Reading"},{"location":"info/windows/#writing","text":"You can either use the GUI to do the writing, or run the following command: ST-LINK_CLI.exe -ME -P stm32-unlocked.bin 0x08000000 -V","title":"Writing"}]}